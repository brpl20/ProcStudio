<script lang="ts">
  // Office Creation Page - Clean modular implementation
  import { onMount } from 'svelte';

  // Components
  import BasicInformation from '../../components/forms_commons_wrappers/BasicInformation.svelte';
  import OabInformation from '../../components/forms_commons_wrappers/OabInformation.svelte';
  import AddressCepWrapper from '../../components/forms_commons_wrappers/AddressCepWrapper.svelte';
  import ParnershipManagement from '../../components/forms_offices_wrappers/PartnershipManagement.svelte';
  import SocialContractCheckbox from '../../components/forms_offices/SocialContractCheckbox.svelte';
  import FileAttachments from '../../components/forms_offices/FileAttachments.svelte';
  import FormSection from '../../components/ui/FormSection.svelte';
  import Phone from '../../components/forms_commons/Phone.svelte';
  import Email from '../../components/forms_commons/Email.svelte';
  import Bank from '../../components/forms_commons/Bank.svelte';

  // Schema and utilities
  import {
    createDefaultOfficeFormData,
    createDefaultPartner,
    validateOfficeForm,
    type OfficeFormData,
    type PartnerFormData
  } from '../../schemas/office-form';
  import {
    submitOfficeForm,
    validatePartners,
    adjustPartnerPercentages
  } from '../../utils/office-form-processor';
  import { officeFormLawyersStore } from '../../stores/officeFormStore.svelte';

  // Form state using schema
  let formData = $state<OfficeFormData>(createDefaultOfficeFormData());
  let partners = $state<PartnerFormData[]>([createDefaultPartner(true)]);
  let profitDistribution = $state<'proportional' | 'disproportional'>('proportional');
  let createSocialContract = $state(false);
  let partnersWithProLabore = $state(true);

  // File handling
  let logoFile = $state<File | null>(null);
  let contractFiles = $state<File[]>([]);

  // UI state
  let loading = $state(false);
  let error = $state<string | null>(null);
  let success = $state<string | null>(null);

  // Store access
  const store = officeFormLawyersStore;

  // Generic add/remove functions for arrays
  function createAddFunction<T>(attributeName: keyof OfficeFormData, defaultValue: T) {
    return () => {
      const currentArray = formData[attributeName] as T[];
      formData[attributeName] = [...currentArray, defaultValue] as any;
    };
  }

  function createRemoveFunction<T>(attributeName: keyof OfficeFormData) {
    return (index: number) => {
      const currentArray = formData[attributeName] as T[];
      if (currentArray.length > 1) {
        formData[attributeName] = currentArray.filter((_, i) => i !== index) as any;
      }
    };
  }

  // Specific add/remove functions
  const addPhone = createAddFunction('phones_attributes', { phone_number: '' });
  const removePhone = createRemoveFunction('phones_attributes');

  const addEmail = createAddFunction('emails_attributes', { email: '' });
  const removeEmail = createRemoveFunction('emails_attributes');

  const addBankAccount = createAddFunction('bank_accounts_attributes', {
    bank_name: '',
    type_account: 'Corrente',
    agency: '',
    account: '',
    operation: '',
    pix: ''
  });
  const removeBankAccount = createRemoveFunction('bank_accounts_attributes');

  // CEP address handler
  function handleAddressFound(event: CustomEvent) {
    const { mappedAddress } = event.detail;
    if (formData.addresses_attributes.length > 0) {
      formData.addresses_attributes[0] = {
        ...formData.addresses_attributes[0],
        ...mappedAddress
      };
    }
  }

  // Keep zip_code in sync between CEP field and first address
  $effect(() => {
    if (formData.zip_code && formData.addresses_attributes.length > 0) {
      formData.addresses_attributes[0].zip_code = formData.zip_code;
    }
  });

  // Form submission
  async function handleSubmit() {
    try {
      loading = true;
      error = null;
      success = null;

      // Validate form
      const validationErrors = validateOfficeForm(formData, partners);
      if (validationErrors.length > 0) {
        error = validationErrors.join(', ');
        return;
      }

      // Validate partners
      const partnerValidation = validatePartners(partners);
      if (!partnerValidation.isValid) {
        error = partnerValidation.errors.join(', ');
        return;
      }

      // Submit form using the processor
      const response = await submitOfficeForm(
        formData,
        partners,
        profitDistribution,
        createSocialContract,
        partnersWithProLabore,
        logoFile,
        contractFiles
      );

      if (response.success) {
        success = response.message || 'Escrit√≥rio criado com sucesso!';
        // Reset form after successful creation
        setTimeout(() => {
          formData = createDefaultOfficeFormData();
          partners = [createDefaultPartner(true)];
          logoFile = null;
          contractFiles = [];
          success = null;
        }, 2000);
      } else {
        error = response.message || 'Erro ao criar escrit√≥rio';
      }
    } catch (err: any) {
      error = err.message || 'Erro ao criar escrit√≥rio';
    } finally {
      loading = false;
    }
  }

  // Load lawyers on mount
  onMount(async () => {
    try {
      await store.loadLawyers();
    } catch (err) {
      console.error('Error loading lawyers:', err);
    }
  });
</script>

<div class="container mx-auto p-6 max-w-4xl">
  <div class="card bg-base-100 shadow-xl">
    <!-- Header -->
    <div class="card-body">
      <h1 class="card-title text-2xl font-bold mb-6">Criar Novo Escrit√≥rio</h1>

      <!-- Success/Error Messages -->
      {#if success}
        <div class="alert alert-success mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>{success}</span>
        </div>
      {/if}

      {#if error}
        <div class="alert alert-error mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>{error}</span>
        </div>
      {/if}

      <form onsubmit={(e) => { e.preventDefault(); handleSubmit(); }} class="space-y-8">
        <!-- Basic Information -->
        <BasicInformation bind:formData={formData} title="Informa√ß√µes B√°sicas" showSite={true} />

        <!-- OAB Information -->
        <OabInformation bind:formData={formData} />

        <!-- Financial Information -->
        <FormSection title="Informa√ß√µes Financeiras">
          {#snippet children()}
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div class="form-control">
                <label class="label" for="quote-value">
                  <span class="label-text">Valor da Cota</span>
                </label>
                <input
                  id="quote-value"
                  type="number"
                  class="input input-bordered"
                  bind:value={formData.quote_value}
                  placeholder="0.00"
                  step="0.01"
                  min="0"
                />
              </div>

              <div class="form-control">
                <label class="label" for="number-quotes">
                  <span class="label-text">N√∫mero de Cotas</span>
                </label>
                <input
                  id="number-quotes"
                  type="number"
                  class="input input-bordered"
                  bind:value={formData.number_of_quotes}
                  placeholder="0"
                  min="0"
                />
              </div>

              <div class="form-control">
                <label class="label cursor-pointer">
                  <span class="label-text">Distribui√ß√£o Proporcional</span>
                  <input
                    type="checkbox"
                    class="checkbox checkbox-primary"
                    bind:checked={formData.proportional}
                  />
                </label>
              </div>
            </div>
          {/snippet}
        </FormSection>

        <!-- Contact Information -->
        <FormSection title="Telefones">
          {#snippet children()}
            <div class="flex justify-end mb-4">
              <button type="button" class="btn btn-outline btn-sm" onclick={addPhone}>‚ûï Adicionar</button>
            </div>

            {#each formData.phones_attributes as phone, index (index)}
              <div class="flex gap-2 mb-2">
                <div class="flex-1">
                  <Phone bind:value={phone.phone_number} />
                </div>
                {#if formData.phones_attributes.length > 1}
                  <button type="button" class="btn btn-error btn-sm" onclick={() => removePhone(index)}>üóëÔ∏è</button>
                {/if}
              </div>
            {/each}
          {/snippet}
        </FormSection>

        <FormSection title="E-mails">
          {#snippet children()}
            <div class="flex justify-end mb-4">
              <button type="button" class="btn btn-outline btn-sm" onclick={addEmail}>‚ûï Adicionar</button>
            </div>

            {#each formData.emails_attributes as email, index (index)}
              <div class="flex gap-2 mb-2">
                <div class="flex-1">
                  <Email bind:value={email.email} />
                </div>
                {#if formData.emails_attributes.length > 1}
                  <button type="button" class="btn btn-error btn-sm" onclick={() => removeEmail(index)}>üóëÔ∏è</button>
                {/if}
              </div>
            {/each}
          {/snippet}
        </FormSection>

        <!-- Address -->
        <FormSection title="Endere√ßo">
          {#snippet children()}
            <AddressCepWrapper
              bind:cepValue={formData.zip_code}
              bind:address={formData.addresses_attributes[0]}
              useAPIValidation={false}
              required={false}
              onaddressfound={handleAddressFound}
            />
          {/snippet}
        </FormSection>

        <!-- Bank Accounts -->
        <FormSection title="Contas Banc√°rias">
          {#snippet children()}
            <div class="flex justify-end mb-4">
              <button type="button" class="btn btn-outline btn-sm" onclick={addBankAccount}>‚ûï Adicionar</button>
            </div>

            {#each formData.bank_accounts_attributes as bankAccount, index (index)}
              <Bank
                bind:bankAccount={formData.bank_accounts_attributes[index]}
                {index}
                showRemoveButton={formData.bank_accounts_attributes.length > 1}
                showPixHelpers={true}
                pixDocumentType="cnpj"
                pixHelperData={{
                  email: formData.emails_attributes[0]?.email || '',
                  cpf: '',
                  cnpj: formData.cnpj,
                  phone: formData.phones_attributes[0]?.phone_number || ''
                }}
                labelPrefix="office-bank"
                onremove={() => removeBankAccount(index)}
              />
            {/each}
          {/snippet}
        </FormSection>

        <!-- Partnership Management -->
        <ParnershipManagement
          bind:partners={partners}
          bind:profitDistribution={profitDistribution}
          bind:partnersWithProLabore={partnersWithProLabore}
          {store}
          onPartnerChange={adjustPartnerPercentages}
        />

        <!-- Social Contract -->
        <SocialContractCheckbox
          bind:createSocialContract={createSocialContract}
          bind:profitDistribution={profitDistribution}
          {partners}
        />

        <!-- File Attachments -->
        <FileAttachments
          bind:logoFile={logoFile}
          bind:contractFiles={contractFiles}
        />

        <!-- Submit Button -->
        <div class="card-actions justify-end pt-6">
          <button type="submit" class="btn btn-primary" disabled={loading}>
            {#if loading}
              <span class="loading loading-spinner loading-sm"></span>
            {/if}
            Criar Escrit√≥rio
          </button>
        </div>
      </form>
    </div>
  </div>
</div>
